/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\terrain.glb 
*/

import React, { useRef } from 'react'
import { Color, TextureLoader, RectAreaLight, RepeatWrapping } from "three";
import { useLoader } from "@react-three/fiber";
import { useGLTF, useHelper, MeshWobbleMaterial, shaderMaterial } from '@react-three/drei'
import { RectAreaLightHelper } from 'three/addons/helpers/RectAreaLightHelper.js';
import { NodeToyMaterial, NodeToyTick } from '@nodetoy/react-nodetoy'
import { data } from '~/shader/test';

// imperatively, all uniforms are available as setter/getters and constructor args
// const material = new ColorShiftMaterial({ color: new THREE.Color("hotpink") })
// material.time = 1

export const Terrain: React.FC<{ clouds: number }> = (props) => {
  // @ts-ignore
  const { nodes, materials } = useGLTF('models/terrain06.gltf');

  const areaLight = useRef<RectAreaLight>(null);
  // useHelper(areaLight, RectAreaLightHelper, 1, "red");
  const colorMap = useLoader(TextureLoader, 'assets/StylizedGrass/Stylized_Grass_002_basecolor.jpg')
  const bumpMap = useLoader(TextureLoader, 'assets/StylizedGrass/Stylized_Grass_002_height.png')
  const normalMap = useLoader(TextureLoader, 'assets/StylizedGrass/Stylized_Grass_002_normal.jpg')
  const roughnessMap = useLoader(TextureLoader, 'assets/StylizedGrass/Stylized_Grass_002_roughness.jpg')
  const aoMap = useLoader(TextureLoader, 'assets/StylizedGrass/Stylized_Grass_002_ambientOcclusion.jpg')
  const cloudAlphaMap = useLoader(TextureLoader, 'assets/cloud_alpha_texture.png')

  const TEXTURE_SCALE = 150;

  colorMap.repeat.set(TEXTURE_SCALE, TEXTURE_SCALE);
  colorMap.wrapS = RepeatWrapping;
  colorMap.wrapT = RepeatWrapping;

  bumpMap.repeat.set(TEXTURE_SCALE, TEXTURE_SCALE);
  bumpMap.wrapS = RepeatWrapping;
  bumpMap.wrapT = RepeatWrapping;

  normalMap.repeat.set(TEXTURE_SCALE, TEXTURE_SCALE);
  normalMap.wrapS = RepeatWrapping;
  normalMap.wrapT = RepeatWrapping;

  roughnessMap.repeat.set(TEXTURE_SCALE, TEXTURE_SCALE);
  roughnessMap.wrapS = RepeatWrapping;
  roughnessMap.wrapT = RepeatWrapping;

  aoMap.repeat.set(TEXTURE_SCALE, TEXTURE_SCALE);
  aoMap.wrapS = RepeatWrapping;
  aoMap.wrapT = RepeatWrapping;

  
  cloudAlphaMap.repeat.set(10, 10);
  cloudAlphaMap.wrapS = RepeatWrapping;
  cloudAlphaMap.wrapT = RepeatWrapping;


  return (
    <group dispose={null}
      position={[0, -46.4, -118]}
      rotation-y={-Math.PI / 1.3}
    
    >
      {/* <rectAreaLight
        ref={areaLight}
        args={['white', 0.01, 1000, 1000]}
        position={[-200, 60, 200]}
        rotation-x={Math.PI / 2}
      /> */}

      <mesh
        geometry={nodes.Plane.geometry}
        // material={nodes.Plane.material}
        receiveShadow
        castShadow
        scale={100}
        material={materials['Material.001']}
      >
        <meshStandardMaterial
          attach="material"
          side={2}
          map={colorMap}
          bumpMap={bumpMap}
          normalMap={normalMap}
          roughnessMap={roughnessMap}
          aoMap={aoMap}
        />
      </mesh>
      {
        props.clouds > 0 &&
        <mesh
          // material={materials['Material.003']}
          geometry={nodes.Plane001.geometry}
          position={[-700, 80, 700]}
          scale={10}
          renderOrder={10}
        >
          <meshStandardMaterial
            attach="material"
            side={2}
            transparent={true}
            opacity={props.clouds}
          />
          {/* <meshPhysicalMaterial
            // factor={0.002}
            // speed={0.5}
            attach="material"
            side={2}
            transparent={true}
            opacity={props.clouds}
            thickness={0.1}
            attenuationDistance={10000}
          /> */}
        </mesh>
      }
    </group>
  )
}

useGLTF.preload('models/terrain06.gltf')
