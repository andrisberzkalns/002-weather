import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import { createRoot } from 'react-dom/client'
import React, { useEffect, useRef, useState, useLayoutEffect, useMemo } from 'react'
import { useInterval } from "react-use";
import { Canvas, useFrame } from '@react-three/fiber'
import { DirectionalLight, DirectionalLightHelper, SpotLight, SpotLightHelper, PointLight, PointLightHelper, Vector3 } from "three";
import { CameraControls, Center, PerspectiveCamera, Stage, Stars, Text3D, useFont, Environment, useGLTF, useHelper, SoftShadows, MeshTransmissionMaterial } from '@react-three/drei'
import { Bloom, DepthOfField, EffectComposer, GodRays, Noise, Vignette } from '@react-three/postprocessing'
import { Terrain } from "../components/Terrain";
import { Clouds } from "../components/Clouds";
import { CDirectionalLight, CPointLight, CSpotLight } from "~/components/Lights";
import { Sky } from "~/components/Sky";
import { Fog } from "~/components/Fog";
import { useControls } from 'leva';
import { Cloud } from "~/components/Cloud";
import { NodeToyMaterial, NodeToyTick } from '@nodetoy/react-nodetoy'
import { data } from '~/shader/test';
import { Lightning } from "~/components/Lightning";
import { Rain } from "~/components/Rain";
import { weatherCodeMap } from "~/utils/weatherCodeMap";

import SunCalc from "suncalc";

const floatToTime = (index: number) => {
  // Convert float to 24 hour time format
  const hours = Math.floor(index * 24);
  const minutes = Math.floor((index * 24 * 60) % 60);
  const seconds = Math.floor((index * 24 * 60 * 60) % 60);
  return `${hours}:${minutes}:${seconds}`;
}

const currentDateTime = new Date();

export default function Home() {
  const [location, setLocation] = useState("Riga");


  const controler = useControls('Coordinates', {
    coordinates: {
      long: 56.95218,
      lat: 24.09764
    }
  });

  const [dateTime, setDateTime] = useState(currentDateTime);
  const [long, setLong] = useState(controler.coordinates.long || 56.95218);
  const [lat, setLat] = useState(controler.coordinates.lat || 24.09764);
  const weather = api.weather.getWeather.useQuery({ q: long + "," + lat });
  console.log(weather.data);
  var sun = SunCalc.getPosition(dateTime, long, lat);
  console.log(sun);

  useInterval(() => {
    console.log("tick");
    weather.refetch();
    setDateTime(new Date());
  }, 1000 * 60 * 2);

  useEffect(() => {
    setLong(controler.coordinates.long);
    setLat(controler.coordinates.lat);
    weather.refetch();
    setDateTime(new Date());
  }, [controler.coordinates]);

  return (
    <>
      <Head>
        <title>Weather</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="absolute top-0 z-10 text-center justify-center opacity-80 w-full">
          <p className="text-white">
            {sun.altitude < 0 ? weatherCodeMap[weather.data?.current.condition.code]?.description.night : weatherCodeMap[weather.data?.current.condition.code]?.description.day}
          </p>
        </div>
        <div className="absolute w-full h-full">
        {
          weather?.data && sun && <Scene sun={sun} weather={weather.data} dateTime={dateTime} />
        }
        </div>
        <footer className="fixed bottom-0 h-6 bg-black opacity-50 w-full text-center">
          <p className="text-white">
            © 2023 Copyright: <a className="font-semibold" href="https://berzkalns.com/" target="_blank">Andris Bērzkalns</a>
          </p>
        </footer>
      </main>
    </>
  );
}


const Scene: React.FC<any> = (props) => {
  const { sun, weather, dateTime } = props;
  const {
    temp_c,
    wind_kph,
    wind_degree,
    wind_dir,
    pressure_mb,
    precip_mm,
    humidity,
    cloud,
    feelslike_c,
    uv,
    condition
  } = weather.current;
  const { code, text } = condition;
  // const controler = useControls('Weather controls', {
  //   timeIndex: {
  //       value: 0.75,
  //       min: 0,
  //       max: 1,
  //   },
  //   coordinates: {
  //     long: 56.95218,
  //     lat: 24.09764
  //   },
  //   cloudIntensity: {
  //     value: cloud / 100,
  //     min: 0,
  //     max: 1
  //   },
  //   fogIntensity: {
  //     value: 0,
  //     min: 0,
  //     max: 1
  //   },
  //   lightning: {
  //     value: false
  //   },
  //   rainIntensity: {
  //     value: 0,
  //     min: 0,
  //     max: 1
  //   }
  // });

  const weatherValues: any = weatherCodeMap[code];

  return (
    <Canvas shadows>
      <Fog intensity={weatherValues.fog} sun={sun} />
      {/* <Cloudy intensity={1}/> */}
      <PerspectiveCamera
        makeDefault
        position={[0, 0.8, 5]}
        fov={75}
        aspect={2}
        near={0.1}
        far={1000}
      />

      {/* <CameraControls /> */}
      <Rain intensity={weatherValues.rain} />
      <Lightning enabled={weatherValues.lightning} />
      <Terrain clouds={weatherValues.cloud || cloud / 100} />
      <Center top>
        <Text3D
          font={"/fonts/Roboto-Black.json"}
          castShadow
          receiveShadow
          position={[-0.4, 0.1, 0]}
          rotation={[0, 0, -0.02]}
        >
          {Math.round(temp_c)}°C
          <meshStandardMaterial
            emissive={"#ffeedd"}
            emissiveIntensity={0.2}
            metalness={0.9}
          />
        </Text3D>
      </Center>

      <Text3D
        font={"/fonts/Roboto-Black.json"}
        castShadow
        receiveShadow
        position={[2.5, 0.25, -2]}
        rotation={[0, 0, 0.07]}
        scale={0.4}
      >
        {Math.round(humidity)}%
        <meshStandardMaterial
          emissive={"#ffeedd"}
          emissiveIntensity={0.2}
          metalness={0.9}
        />
      </Text3D>
      <Sky sun={sun} cloudIntensity={weatherValues.cloud || cloud / 100} fogIntensity={weatherValues.fog} />

      {/* <DepthOfField focusDistance={0} focalLength={0.02} bokehScale={2} height={480} /> */}
      <EffectComposer>
        <Bloom luminanceThreshold={2.5} luminanceSmoothing={0.2} height={1000} opacity={0.02} />
        <Noise opacity={0.03} />
        <Vignette eskil={false} offset={0.04} darkness={0.6} />
      </EffectComposer>
    </Canvas>
  )
}