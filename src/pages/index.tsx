import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import { createRoot } from 'react-dom/client'
import React, { useEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { DirectionalLight, DirectionalLightHelper, SpotLight, SpotLightHelper, PointLight, PointLightHelper } from "three";

import { CameraControls, Center, PerspectiveCamera, Stage, Stars, Text3D, useFont, Environment, useGLTF, useHelper, SoftShadows, MeshTransmissionMaterial } from '@react-three/drei'
import { Bloom, DepthOfField, EffectComposer, GodRays, Noise, Vignette } from '@react-three/postprocessing'
import { Terrain } from "../components/Terrain";
import { Clouds } from "../components/Clouds";
import { CDirectionalLight, CPointLight, CSpotLight } from "~/components/Lights";
import { Sky } from "~/components/Sky";
import { Fog } from "~/components/Fog";
import { useControls } from 'leva';
import { Cloud } from "~/components/Cloud";
import { NodeToyMaterial, NodeToyTick } from '@nodetoy/react-nodetoy'
import { data } from '~/shader/test';
import { Lightning } from "~/components/Lightning";


import SunCalc from "suncalc";

const DEBUG = true;


const Box: React.FC<any> = (props) => {
  // This reference gives us direct access to the THREE.Mesh object
  const ref: React.MutableRefObject<any> = useRef()
  // Hold state for hovered and clicked events
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  // Subscribe this component to the render-loop, rotate the mesh every frame
  useFrame((state, delta) => (ref?.current) && (ref.current.rotation.x += delta))
  // Return the view, these are regular Threejs elements expressed in JSX
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={(event) => click(!clicked)}
      onPointerOver={(event) => hover(true)}
      onPointerOut={(event) => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

const floatToTime = (index: number) => {
  // Convert float to 24 hour time format
  const hours = Math.floor(index * 24);
  const minutes = Math.floor((index * 24 * 60) % 60);
  const seconds = Math.floor((index * 24 * 60 * 60) % 60);
  return `${hours}:${minutes}:${seconds}`;
}


export default function Home() {
  const controler = useControls('Sun Controls', {
    timeIndex: {
        value: 0.75,
        min: 0,
        max: 1,
    },
    coordinates: {
      long: 56.95218,
      lat: 24.09764
    },
    cloudIntensity: {
      value: 0.5,
      min: 0,
      max: 1
    },
    fogIntensity: {
      value: 0,
      min: 0,
      max: 1
    },
    lightning: {
      value: false
    }
});

  const weather = api.weather.getWeather.useQuery({ location: "Riga" });

  const long = controler.coordinates.long;
  const lat = controler.coordinates.lat;

  // console.log(weather);
  // console.log(weather.data);
  // const font = useFont("/fonts/Roboto-Black.json");

  // get today's sunlight times for London
  var times = SunCalc.getTimes(new Date(), long, lat);

  // format sunrise time from the Date object
  var sunriseStr = times.sunrise.getHours() + ':' + times.sunrise.getMinutes();

  // Get current time
  var currentTime = new Date();
  // console.log(currentTime.getDate());
  var currentTimestamp = currentTime.getTime();
  const middayTime = new Date('July 1, 1999, 12:00:00');
  const midnightTime = new Date('July 1, 1999, 00:00:00');
  const time = floatToTime(controler.timeIndex);
  console.log(time);
  console.log("times", times);
  const dateTime = new Date('September 10, 2023 ' + time);
  var sunPos = SunCalc.getPosition(dateTime, long, lat);

  // get position of the sun (azimuth and altitude) at today's sunrise
  var sunrisePos = SunCalc.getPosition(times.sunrise, long, lat);
  var sunsetPos = SunCalc.getPosition(times.sunset, long, lat);
  console.log("sunrisePos", sunrisePos);
  console.log("sunsetPos", sunsetPos);

  // get sunrise azimuth in degrees
  var sunriseAzimuth = sunrisePos.azimuth * 180 / Math.PI;

  // console.log("times", times);
  // console.log("sunriseStr", sunriseStr);
  // console.log("sunrisePos", sunrisePos);
  // console.log("sunsetPos", sunsetPos);
  // console.log("sunriseAzimuth", sunriseAzimuth);
  // console.log("sunPos", sunPos);


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <Canvas shadows>
          <Fog intensity={controler.fogIntensity} sun={{...sunPos, timeIndex: controler.timeIndex}}/>
          <PerspectiveCamera
            makeDefault
            position={[0, 0.5, 5]}
            fov={75}
            aspect={2}
            near={0.1}
            far={1000}
          />

          {/* <Cloud /> */}
          <Terrain clouds={controler.cloudIntensity}/>
          {/* <Hamster /> */}
          {/* <Box /> */}
          
          <Center top>
            <Text3D
              font={"/fonts/Roboto-Black.json"}
              castShadow
              receiveShadow
              position={[-0.4, 0.1, 0]}
              rotation={[0, 0, -0.02]}
            >
              {weather?.data?.current?.temp_c}Â°C
              <meshStandardMaterial
                emissive={"#ffeedd"}
                emissiveIntensity={0.2}
                metalness={0.9}
              />
              {/* <NodeToyMaterial data={data} /> */}

            </Text3D>
          </Center>


          <Text3D
            font={"/fonts/Roboto-Black.json"}
            castShadow
            receiveShadow
            position={[2.5, 0.25, -2]}
            rotation={[0, 0, 0.07]}
            scale={0.4}
          >
            {weather?.data?.current?.humidity}%
            <meshStandardMaterial
              emissive={"#ffeedd"}
              emissiveIntensity={0.2}
              metalness={0.9}
            />
            {/* <NodeToyMaterial data={data} /> */}

          </Text3D>

          <CameraControls />
          {/* <CPointLight/> */}
          {/* <Grid args={[1000,1000,1000,1000]} renderOrder={10}/> */}

          <Lightning enabled={controler.lightning}/>

          <Sky sun={{...sunPos, timeIndex: controler.timeIndex}} cloudIntensity={controler.cloudIntensity} fogIntensity={controler.fogIntensity}/>

            {/* <DepthOfField focusDistance={0} focalLength={0.02} bokehScale={2} height={480} /> */}
          <EffectComposer>
            <Bloom luminanceThreshold={2.5} luminanceSmoothing={0.2} height={1000} opacity={0.02}/>
            <Noise opacity={0.03} />
            <Vignette eskil={false} offset={0.04} darkness={0.6} />
          </EffectComposer>
        </Canvas>
      </main>
    </>
  );
}
